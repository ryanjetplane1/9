//var _interopRequireDefault = require("../../babel/runtime/helpers/interopRequireDefault");

var _assertThisInitialized2 = _interopRequireDefault(require("../../babel/runtime/helpers/assertThisInitialized"));

var _get2 = _interopRequireDefault(require("../../babel/runtime/helpers/get"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("../../babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("../../babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("../../babel/runtime/helpers/inherits"));

var _classCallCheck2 = _interopRequireDefault(require("../../babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("../../babel/runtime/helpers/createClass"));

function _createSuper(Derived) {
    return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (_isNativeReflectConstruct()) {
            var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
    };
}

function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}

!function(t, i) {
    "use strict";
    var e = /* */ function() {
        function e() {
            (0, _classCallCheck2.default)(this, e);
            this._lastUpdateFrame = -2147483648, this._updateFrame = -2147483648, this._isTrigger = !1, 
            this.contacts = [];
        }
        (0, _createClass2.default)(e, [ {
            key: "_setUpdateFrame",
            value: function _setUpdateFrame(t) {
                this._lastUpdateFrame = this._updateFrame, this._updateFrame = t;
            }
        } ]);
        return e;
    }();
    var s = function s() {
        (0, _classCallCheck2.default)(this, s);
        this._idCounter = 0, this.colliderA = null, this.colliderB = null, this.distance = 0, 
        this.normal = new i.Vector3(), this.positionOnA = new i.Vector3(), this.positionOnB = new i.Vector3(), 
        this._id = ++this._idCounter;
    };
    var o = function o() {
        (0, _classCallCheck2.default)(this, o);
        this.succeeded = !1, this.collider = null, this.point = new i.Vector3(), this.normal = new i.Vector3(), 
        this.hitFraction = 0;
    };
    var l = /* */ function() {
        function l() {
            (0, _classCallCheck2.default)(this, l);
            this._hitResultsPoolIndex = 0, this._hitResultsPool = [], this._contactPonintsPoolIndex = 0, 
            this._contactPointsPool = [], this._collisionsPool = [], this._collisions = {};
        }
        (0, _createClass2.default)(l, [ {
            key: "getHitResult",
            value: function getHitResult() {
                var t = this._hitResultsPool[this._hitResultsPoolIndex++];
                return t || (t = new o(), this._hitResultsPool.push(t)), t;
            }
        }, {
            key: "recoverAllHitResultsPool",
            value: function recoverAllHitResultsPool() {
                this._hitResultsPoolIndex = 0;
            }
        }, {
            key: "getContactPoints",
            value: function getContactPoints() {
                var t = this._contactPointsPool[this._contactPonintsPoolIndex++];
                return t || (t = new s(), this._contactPointsPool.push(t)), t;
            }
        }, {
            key: "recoverAllContactPointsPool",
            value: function recoverAllContactPointsPool() {
                this._contactPonintsPoolIndex = 0;
            }
        }, {
            key: "getCollision",
            value: function getCollision(t, i) {
                var s, o = t.id, l = i.id, n = this._collisions[o];
                return n && (s = n[l]), s || (n || (n = {}, this._collisions[o] = n), (s = 0 === this._collisionsPool.length ? new e() : this._collisionsPool.pop())._colliderA = t, 
                s._colliderB = i, n[l] = s), s;
            }
        }, {
            key: "recoverCollision",
            value: function recoverCollision(t) {
                var i = t._colliderA.id, e = t._colliderB.id;
                this._collisions[i][e] = null, this._collisionsPool.push(t);
            }
        }, {
            key: "garbageCollection",
            value: function garbageCollection() {
                for (var t in this._hitResultsPoolIndex = 0, this._hitResultsPool.length = 0, this._contactPonintsPoolIndex = 0, 
                this._contactPointsPool.length = 0, this._collisionsPool.length = 0, this._collisionsPool) {
                    var i = this._collisionsPool[t], e = !0;
                    for (var s in i) {
                        i[s] ? e = !1 : delete i[s];
                    }
                    e && delete this._collisionsPool[t];
                }
            }
        } ]);
        return l;
    }();
    var n = /* */ function() {
        function n() {
            (0, _classCallCheck2.default)(this, n);
            this._scale = new i.Vector3(1, 1, 1), this._centerMatrix = new i.Matrix4x4(), this._attatched = !1, 
            this._indexInCompound = -1, this._compoundParent = null, this._attatchedCollisionObject = null, 
            this._referenceCount = 0, this._localOffset = new i.Vector3(0, 0, 0), this._localRotation = new i.Quaternion(0, 0, 0, 1), 
            this.needsCustomCollisionCallback = !1;
        }
        (0, _createClass2.default)(n, [ {
            key: "_setScale",
            value: function _setScale(t) {}
        }, {
            key: "_addReference",
            value: function _addReference() {
                this._referenceCount++;
            }
        }, {
            key: "_removeReference",
            value: function _removeReference() {
                this._referenceCount--;
            }
        }, {
            key: "updateLocalTransformations",
            value: function updateLocalTransformations() {
                if (this._compoundParent) {
                    var t = n._tempVector30;
                    i.Vector3.multiply(this.localOffset, this._scale, t), n._createAffineTransformation(t, this.localRotation, this._centerMatrix.elements);
                } else n._createAffineTransformation(this.localOffset, this.localRotation, this._centerMatrix.elements);
            }
        }, {
            key: "cloneTo",
            value: function cloneTo(t) {
                var i = t;
                this._localOffset.cloneTo(i.localOffset), this._localRotation.cloneTo(i.localRotation), 
                i.localOffset = i.localOffset, i.localRotation = i.localRotation;
            }
        }, {
            key: "clone",
            value: function clone() {
                return null;
            }
        }, {
            key: "destroy",
            value: function destroy() {
                this._btShape && (this._btShape = null);
            }
        }, {
            key: "type",
            get: function get() {
                return this._type;
            }
        }, {
            key: "localOffset",
            get: function get() {
                return this._localOffset;
            },
            set: function set(t) {
                t.cloneTo(this._localOffset);
            }
        }, {
            key: "localRotation",
            get: function get() {
                return this._localRotation;
            },
            set: function set(t) {
                this._localRotation = t, this._compoundParent && this._compoundParent._updateChildTransform(this);
            }
        } ], [ {
            key: "__init__",
            value: function __init__() {
                n._btScale = new CANNON.Vec3(), n._btVector30 = new CANNON.Vec3(), n._btQuaternion0 = new CANNON.Quaternion();
            }
        }, {
            key: "_createAffineTransformation",
            value: function _createAffineTransformation(t, i, e) {
                var s = i.x, o = i.y, l = i.z, n = i.w, r = s + s, a = o + o, h = l + l, c = s * r, _ = s * a, d = s * h, p = o * a, u = o * h, C = l * h, m = n * r, y = n * a, O = n * h;
                e[0] = 1 - (p + C), e[1] = _ + O, e[2] = d - y, e[3] = 0, e[4] = _ - O, e[5] = 1 - (c + C), 
                e[6] = u + m, e[7] = 0, e[8] = d + y, e[9] = u - m, e[10] = 1 - (c + p), e[11] = 0, 
                e[12] = t.x, e[13] = t.y, e[14] = t.z, e[15] = 1;
            }
        } ]);
        return n;
    }();
    n.SHAPEORIENTATION_UPX = 0, n.SHAPEORIENTATION_UPY = 1, n.SHAPEORIENTATION_UPZ = 2, 
    n.SHAPETYPES_BOX = 0, n.SHAPETYPES_SPHERE = 1, n.SHAPETYPES_CYLINDER = 2, n.SHAPETYPES_CAPSULE = 3, 
    n.SHAPETYPES_CONVEXHULL = 4, n.SHAPETYPES_COMPOUND = 5, n.SHAPETYPES_STATICPLANE = 6, 
    n.SHAPETYPES_CONE = 7, n._tempVector30 = new i.Vector3();
    var r = /* */ function(_n) {
        (0, _inherits2.default)(r, _n);
        var _super = _createSuper(r);
        function r() {
            var _this;
            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            (0, _classCallCheck2.default)(this, r);
            _this = _super.call(this), _this._sizeX = t, _this._sizeY = i, _this._sizeZ = e, 
            _this._type = n.SHAPETYPES_BOX;
            var s = new CANNON.Vec3(t / 2, i / 2, e / 2);
            _this._btShape = new CANNON.Box(s);
            return _this;
        }
        (0, _createClass2.default)(r, [ {
            key: "_setScale",
            value: function _setScale(t) {
                this._scale.setValue(t.x, t.y, t.z), this._btShape.halfExtents.set(this.sizeX / 2 * t.x, this.sizeY / 2 * t.y, this.sizeZ / 2 * t.z), 
                this._btShape.updateConvexPolyhedronRepresentation(), this._btShape.updateBoundingSphereRadius();
            }
        }, {
            key: "clone",
            value: function clone() {
                var t = new r(this._sizeX, this._sizeY, this._sizeZ);
                return this.cloneTo(t), t;
            }
        }, {
            key: "sizeX",
            get: function get() {
                return this._sizeX;
            }
        }, {
            key: "sizeY",
            get: function get() {
                return this._sizeY;
            }
        }, {
            key: "sizeZ",
            get: function get() {
                return this._sizeZ;
            }
        } ], [ {
            key: "__init__",
            value: function __init__() {
                r._btSize = new CANNON.Vec3();
            }
        } ]);
        return r;
    }(n);
    var a = /* */ function(_n2) {
        (0, _inherits2.default)(a, _n2);
        var _super2 = _createSuper(a);
        function a() {
            var _this2;
            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : .5;
            (0, _classCallCheck2.default)(this, a);
            _this2 = _super2.call(this), _this2._radius = t, _this2._type = n.SHAPETYPES_SPHERE, 
            _this2._btShape = new CANNON.Sphere(t);
            return _this2;
        }
        (0, _createClass2.default)(a, [ {
            key: "_setScale",
            value: function _setScale(t) {
                var i = Math.max(t.x, t.y, t.z);
                this._scale.setValue(i, i, i), this._btShape.radius = i * this.radius, this._btShape.updateBoundingSphereRadius();
            }
        }, {
            key: "clone",
            value: function clone() {
                var t = new a(this._radius);
                return this.cloneTo(t), t;
            }
        }, {
            key: "radius",
            get: function get() {
                return this._radius;
            }
        } ]);
        return a;
    }(n);
    var h = /* */ function(_i$Component) {
        (0, _inherits2.default)(h, _i$Component);
        var _super3 = _createSuper(h);
        function h(t, e) {
            var _this3;
            (0, _classCallCheck2.default)(this, h);
            _this3 = _super3.call(this), _this3._restitution = 0, _this3._friction = .5, _this3._collisionGroup = i.Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER, 
            _this3._canCollideWith = i.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, _this3._colliderShape = null, 
            _this3._transformFlag = 2147483647, _this3._controlBySimulation = !1, _this3._enableProcessCollisions = !0, 
            _this3._inPhysicUpdateListIndex = -1, _this3.canScaleShape = !0, _this3._collisionGroup = t, 
            _this3._canCollideWith = e, h._physicObjectsMap[_this3.id] = (0, _assertThisInitialized2.default)(_this3);
            return _this3;
        }
        (0, _createClass2.default)(h, [ {
            key: "_parseShape",
            value: function _parseShape(t) {
                if (1 === t.length) {
                    var i = h._creatShape(t[0]);
                    this.colliderShape = i;
                }
            }
        }, {
            key: "_onScaleChange",
            value: function _onScaleChange(t) {
                this._colliderShape._setScale(t);
            }
        }, {
            key: "_onEnable",
            value: function _onEnable() {
                this._simulation = this.owner._scene._cannonPhysicsSimulation, this._colliderShape && (this._derivePhysicsTransformation(!0), 
                this._addToSimulation());
            }
        }, {
            key: "_onDisable",
            value: function _onDisable() {
                this._colliderShape && (this._removeFromSimulation(), -1 !== this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.remove(this)), 
                this._simulation = null;
            }
        }, {
            key: "_onDestroy",
            value: function _onDestroy() {
                delete h._physicObjectsMap[this.id], this._btColliderObject = null, this._colliderShape.destroy(), 
                (0, _get2.default)((0, _getPrototypeOf2.default)(h.prototype), "_onDestroy", this).call(this), 
                this._btColliderObject = null, this._colliderShape = null, this._simulation = null, 
                this.owner.transform.off(i.Event.TRANSFORM_CHANGED, this, this._onTransformChanged);
            }
        }, {
            key: "_isValid",
            value: function _isValid() {
                return this._simulation && this._colliderShape && this._enabled;
            }
        }, {
            key: "_parse",
            value: function _parse(t) {
                null != t.collisionGroup && (this.collisionGroup = t.collisionGroup), null != t.canCollideWith && (this.canCollideWith = t.canCollideWith);
            }
        }, {
            key: "_setTransformFlag",
            value: function _setTransformFlag(t, i) {
                i ? this._transformFlag |= t : this._transformFlag &= ~t;
            }
        }, {
            key: "_getTransformFlag",
            value: function _getTransformFlag(t) {
                return 0 != (this._transformFlag & t);
            }
        }, {
            key: "_addToSimulation",
            value: function _addToSimulation() {}
        }, {
            key: "_removeFromSimulation",
            value: function _removeFromSimulation() {}
        }, {
            key: "_derivePhysicsTransformation",
            value: function _derivePhysicsTransformation(t) {
                var i = this._btColliderObject;
                this._innerDerivePhysicsTransformation(i, t);
            }
        }, {
            key: "_innerDerivePhysicsTransformation",
            value: function _innerDerivePhysicsTransformation(t, e) {
                var s = this.owner._transform;
                if (e || this._getTransformFlag(i.Transform3D.TRANSFORM_WORLDPOSITION)) {
                    var o = this._colliderShape.localOffset, l = s.position, n = h._btVector30;
                    if (0 !== o.x || 0 !== o.y || 0 !== o.z) {
                        var r = h._tempVector30, a = s.worldMatrix;
                        i.Vector3.transformCoordinate(o, a, r), n.set(r.x, r.y, r.z);
                    } else n.set(l.x, l.y, l.z);
                    t.position.set(n.x, n.y, n.z), this._setTransformFlag(i.Transform3D.TRANSFORM_WORLDPOSITION, !1);
                }
                if (e || this._getTransformFlag(i.Transform3D.TRANSFORM_WORLDQUATERNION)) {
                    var c = this._colliderShape.localRotation, _ = h._btQuaternion0, d = s.rotation;
                    if (0 !== c.x || 0 !== c.y || 0 !== c.z || 1 !== c.w) {
                        var p = h._tempQuaternion0;
                        h.physicQuaternionMultiply(d.x, d.y, d.z, d.w, c, p), _.set(p.x, p.y, p.z, p.w);
                    } else _.set(d.x, d.y, d.z, d.w);
                    t.quaternion.set(_.x, _.y, _.z, _.w), this._setTransformFlag(i.Transform3D.TRANSFORM_WORLDQUATERNION, !1);
                }
                (e || this._getTransformFlag(i.Transform3D.TRANSFORM_WORLDSCALE)) && (this._onScaleChange(s.getWorldLossyScale()), 
                this._setTransformFlag(i.Transform3D.TRANSFORM_WORLDSCALE, !1));
            }
        }, {
            key: "_updateTransformComponent",
            value: function _updateTransformComponent(t) {
                var e = this._colliderShape, s = e.localOffset, o = e.localRotation, l = this.owner._transform, n = l.position, r = l.rotation, a = t.position, c = t.quaternion, _ = c.x, d = c.y, p = c.z, u = c.w;
                if (0 !== o.x || 0 !== o.y || 0 !== o.z || 1 !== o.w) {
                    var C = h._tempQuaternion0;
                    o.invert(C), h.physicQuaternionMultiply(_, d, p, u, C, r);
                } else r.x = _, r.y = d, r.z = p, r.w = u;
                if (l.rotation = r, 0 !== s.x || 0 !== s.y || 0 !== s.z) {
                    var m = h._tempVector30;
                    m.x = s.x, m.y = s.y, m.z = s.z, i.Vector3.transformQuat(m, r, m), n.x = a.x - m.x, 
                    n.y = a.y - m.z, n.z = a.z - m.y;
                } else n.x = a.x, n.y = a.y, n.z = a.z;
                l.position = n;
            }
        }, {
            key: "_onShapeChange",
            value: function _onShapeChange(t) {}
        }, {
            key: "_onAdded",
            value: function _onAdded() {
                this.enabled = this._enabled, this.restitution = this._restitution, this.friction = this._friction, 
                this.owner.transform.on(i.Event.TRANSFORM_CHANGED, this, this._onTransformChanged);
            }
        }, {
            key: "_onTransformChanged",
            value: function _onTransformChanged(t) {
                !h._addUpdateList && this._controlBySimulation || (t &= i.Transform3D.TRANSFORM_WORLDPOSITION | i.Transform3D.TRANSFORM_WORLDQUATERNION | i.Transform3D.TRANSFORM_WORLDSCALE) && (this._transformFlag |= t, 
                this._isValid() && -1 === this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.add(this));
            }
        }, {
            key: "_cloneTo",
            value: function _cloneTo(t) {
                var i = t;
                i.restitution = this._restitution, i.friction = this._friction, i.collisionGroup = this._collisionGroup, 
                i.canCollideWith = this._canCollideWith, i.canScaleShape = this.canScaleShape, this._colliderShape && (i.colliderShape = this._colliderShape.clone());
            }
        }, {
            key: "restitution",
            get: function get() {
                return this._restitution;
            },
            set: function set(t) {
                this._restitution = t, this._btColliderObject && (this._btColliderObject.material.restitution = t);
            }
        }, {
            key: "friction",
            get: function get() {
                return this._friction;
            },
            set: function set(t) {
                this._friction = t, this._btColliderObject && (this._btColliderObject.material.friction = t);
            }
        }, {
            key: "colliderShape",
            get: function get() {
                return this._colliderShape;
            },
            set: function set(t) {
                var i = this._colliderShape;
                if (i && (i._attatched = !1, i._attatchedCollisionObject = null), this._colliderShape = t, 
                t) {
                    if (t._attatched) throw "PhysicsComponent: this shape has attatched to other entity.";
                    if (t._attatched = !0, t._attatchedCollisionObject = this, this._btColliderObject) {
                        if (t.type != n.SHAPETYPES_COMPOUND) {
                            this._btColliderObject.shapes.length = 0, this._btColliderObject.shapeOffsets.length = 0, 
                            this._btColliderObject.shapeOrientations.length = 0;
                            var e = t.localOffset, s = t._scale, o = new CANNON.Vec3(e.x * s.x, e.y * s.y, e.z * s.z);
                            this._btColliderObject.addShape(this._colliderShape._btShape, o), this._btColliderObject.updateBoundingRadius();
                        } else t.bindRigidBody(this);
                        var l = this._simulation && this._enabled;
                        l && i && this._removeFromSimulation(), this._onShapeChange(t), l && (this._derivePhysicsTransformation(!0), 
                        this._addToSimulation());
                    }
                } else this._simulation && this._enabled && i && this._removeFromSimulation();
            }
        }, {
            key: "simulation",
            get: function get() {
                return this._simulation;
            }
        }, {
            key: "collisionGroup",
            get: function get() {
                return this._collisionGroup;
            },
            set: function set(t) {
                this._collisionGroup !== t && (this._collisionGroup = t, this._btColliderObject.collisionFilterGroup = t, 
                this._simulation && this._colliderShape && this._enabled && (this._removeFromSimulation(), 
                this._addToSimulation()));
            }
        }, {
            key: "canCollideWith",
            get: function get() {
                return this._canCollideWith;
            },
            set: function set(t) {
                this._canCollideWith !== t && (this._canCollideWith = t, this._btColliderObject.collisionFilterMask = t, 
                this._simulation && this._colliderShape && this._enabled && (this._removeFromSimulation(), 
                this._addToSimulation()));
            }
        } ], [ {
            key: "__init__",
            value: function __init__() {
                h._btVector30 = new CANNON.Vec3(0, 0, 0), h._btQuaternion0 = new CANNON.Quaternion(0, 0, 0, 1);
            }
        }, {
            key: "_creatShape",
            value: function _creatShape(t) {
                var i;
                switch (t.type) {
                  case "BoxColliderShape":
                    var e = t.size;
                    i = e ? new r(e[0], e[1], e[2]) : new r();
                    break;

                  case "SphereColliderShape":
                    i = new a(t.radius);
                    break;

                  default:
                    throw "unknown shape type.";
                }
                if (t.center) {
                    var s = i.localOffset;
                    s.fromArray(t.center), i.localOffset = s;
                }
                return i;
            }
        }, {
            key: "physicQuaternionMultiply",
            value: function physicQuaternionMultiply(t, i, e, s, o, l) {
                var n = o.x, r = o.y, a = o.z, h = o.w, c = i * a - e * r, _ = e * n - t * a, d = t * r - i * n, p = t * n + i * r + e * a;
                l.x = t * h + n * s + c, l.y = i * h + r * s + _, l.z = e * h + a * s + d, l.w = s * h - p;
            }
        } ]);
        return h;
    }(i.Component);
    h.ACTIVATIONSTATE_ACTIVE_TAG = 1, h.ACTIVATIONSTATE_ISLAND_SLEEPING = 2, h.ACTIVATIONSTATE_WANTS_DEACTIVATION = 3, 
    h.ACTIVATIONSTATE_DISABLE_DEACTIVATION = 4, h.ACTIVATIONSTATE_DISABLE_SIMULATION = 5, 
    h.COLLISIONFLAGS_STATIC_OBJECT = 1, h.COLLISIONFLAGS_KINEMATIC_OBJECT = 2, h.COLLISIONFLAGS_NO_CONTACT_RESPONSE = 4, 
    h.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK = 8, h.COLLISIONFLAGS_CHARACTER_OBJECT = 16, 
    h.COLLISIONFLAGS_DISABLE_VISUALIZE_OBJECT = 32, h.COLLISIONFLAGS_DISABLE_SPU_COLLISION_PROCESSING = 64, 
    h._tempVector30 = new i.Vector3(), h._tempQuaternion0 = new i.Quaternion(), h._tempQuaternion1 = new i.Quaternion(), 
    h._tempMatrix4x40 = new i.Matrix4x4(), h._physicObjectsMap = {}, h._addUpdateList = !0;
    var c = /* */ function(_h) {
        (0, _inherits2.default)(c, _h);
        var _super4 = _createSuper(c);
        function c(t, i) {
            var _this4;
            (0, _classCallCheck2.default)(this, c);
            _this4 = _super4.call(this, t, i), _this4._isTrigger = !1;
            return _this4;
        }
        (0, _createClass2.default)(c, [ {
            key: "_onAdded",
            value: function _onAdded() {
                (0, _get2.default)((0, _getPrototypeOf2.default)(c.prototype), "_onAdded", this).call(this), 
                this.isTrigger = this._isTrigger;
            }
        }, {
            key: "_cloneTo",
            value: function _cloneTo(t) {
                (0, _get2.default)((0, _getPrototypeOf2.default)(c.prototype), "_cloneTo", this).call(this, t), 
                t.isTrigger = this._isTrigger;
            }
        }, {
            key: "isTrigger",
            get: function get() {
                return this._isTrigger;
            },
            set: function set(t) {
                if (this._isTrigger = t, this._btColliderObject) if (this._btColliderObject.isTrigger = t, 
                t) {
                    var i = this._btColliderObject.type;
                    this._btColliderObject.collisionResponse = !1, 0 == (i & CANNON.Body.STATIC) && (this._btColliderObject.type |= CANNON.Body.STATIC);
                } else this._btColliderObject.collisionResponse = !0, 0 != (i & CANNON.Body.STATIC) && (this._btColliderObject.type ^= CANNON.Body.STATIC);
            }
        } ]);
        return c;
    }(h);
    var _ = /* */ function(_c) {
        (0, _inherits2.default)(_, _c);
        var _super5 = _createSuper(_);
        function _() {
            var _this5;
            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
            var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
            (0, _classCallCheck2.default)(this, _);
            _this5 = _super5.call(this, t, i), _this5._enableProcessCollisions = !1;
            return _this5;
        }
        (0, _createClass2.default)(_, [ {
            key: "_addToSimulation",
            value: function _addToSimulation() {
                this._simulation._addPhysicsCollider(this);
            }
        }, {
            key: "_removeFromSimulation",
            value: function _removeFromSimulation() {
                this._simulation._removePhysicsCollider(this);
            }
        }, {
            key: "_parse",
            value: function _parse(t) {
                null != t.friction && (this.friction = t.friction), null != t.restitution && (this.restitution = t.restitution), 
                null != t.isTrigger && (this.isTrigger = t.isTrigger), (0, _get2.default)((0, _getPrototypeOf2.default)(_.prototype), "_parse", this).call(this, t), 
                this._parseShape(t.shapes);
            }
        }, {
            key: "_onAdded",
            value: function _onAdded() {
                this._btColliderObject = new CANNON.Body(), this._btColliderObject.material = new CANNON.Material(), 
                this._btColliderObject.layaID = this._id, this._btColliderObject.type = CANNON.Body.STATIC, 
                this._btColliderObject.collisionFilterGroup = this._collisionGroup, this._btColliderObject.collisionFilterMask = this._canCollideWith, 
                (0, _get2.default)((0, _getPrototypeOf2.default)(_.prototype), "_onAdded", this).call(this);
            }
        } ]);
        return _;
    }(c);
    var d = /* */ function(_i$SingletonList) {
        (0, _inherits2.default)(d, _i$SingletonList);
        var _super6 = _createSuper(d);
        function d() {
            (0, _classCallCheck2.default)(this, d);
            return _super6.call(this);
        }
        (0, _createClass2.default)(d, [ {
            key: "add",
            value: function add(t) {
                if (-1 !== t._inPhysicUpdateListIndex) throw "PhysicsUpdateList:element has  in  PhysicsUpdateList.";
                this._add(t), t._inPhysicUpdateListIndex = this.length++;
            }
        }, {
            key: "remove",
            value: function remove(t) {
                var i = t._inPhysicUpdateListIndex;
                if (this.length--, i !== this.length) {
                    var e = this.elements[this.length];
                    this.elements[i] = e, e._inPhysicUpdateListIndex = i;
                }
                t._inPhysicUpdateListIndex = -1;
            }
        } ]);
        return d;
    }(i.SingletonList);
    var p = /* */ function() {
        function p(t) {
            var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            (0, _classCallCheck2.default)(this, p);
            this._gravity = new i.Vector3(0, -10, 0), this._btClosestRayResultCallback = new CANNON.RaycastResult(), 
            this._btRayoption = {}, this._collisionsUtils = new l(), this._previousFrameCollisions = [], 
            this._currentFrameCollisions = [], this._physicsUpdateList = new d(), this._updatedRigidbodies = 0, 
            this.maxSubSteps = 1, this.fixedTimeStep = 1 / 60, this.maxSubSteps = t.maxSubSteps, 
            this.fixedTimeStep = t.fixedTimeStep, this._btDiscreteDynamicsWorld = new CANNON.World(), 
            this._btBroadphase = new CANNON.NaiveBroadphase(), this._btDiscreteDynamicsWorld.broadphase = this._btBroadphase, 
            this._btDiscreteDynamicsWorld.defaultContactMaterial.contactEquationRelaxation = t.contactEquationRelaxation, 
            this._btDiscreteDynamicsWorld.defaultContactMaterial.contactEquationStiffness = t.contactEquationStiffness, 
            this.gravity = this._gravity;
        }
        (0, _createClass2.default)(p, [ {
            key: "_simulate",
            value: function _simulate(t) {
                this._updatedRigidbodies = 0, this._btDiscreteDynamicsWorld && (this._btDiscreteDynamicsWorld.callBackBody.length = 0, 
                this._btDiscreteDynamicsWorld.allContacts.length = 0, this._btDiscreteDynamicsWorld.step(this.fixedTimeStep, t, this.maxSubSteps));
                for (var i = this._btDiscreteDynamicsWorld.callBackBody, e = 0, s = i.length; e < s; e++) {
                    var o = i[e], l = h._physicObjectsMap[o.layaID];
                    l._simulation._updatedRigidbodies++, l._updateTransformComponent(l._btColliderObject);
                }
            }
        }, {
            key: "_destroy",
            value: function _destroy() {
                this._btDiscreteDynamicsWorld = null, this._btBroadphase = null;
            }
        }, {
            key: "_addPhysicsCollider",
            value: function _addPhysicsCollider(t) {
                this._btDiscreteDynamicsWorld.addBody(t._btColliderObject);
            }
        }, {
            key: "_removePhysicsCollider",
            value: function _removePhysicsCollider(t) {
                this._btDiscreteDynamicsWorld.removeBody(t._btColliderObject);
            }
        }, {
            key: "_addRigidBody",
            value: function _addRigidBody(t) {
                if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                this._btDiscreteDynamicsWorld.addBody(t._btColliderObject);
            }
        }, {
            key: "_removeRigidBody",
            value: function _removeRigidBody(t) {
                if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                this._btDiscreteDynamicsWorld.removeBody(t._btColliderObject);
            }
        }, {
            key: "raycastFromTo",
            value: function raycastFromTo(t, e) {
                var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                var o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : i.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;
                var l = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : i.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;
                var n = this._btClosestRayResultCallback;
                n.hasHit = !1;
                var r = this._btRayoption, a = p._btTempVector30, c = p._btTempVector31;
                if (a.set(t.x, t.y, t.z), c.set(e.x, e.y, e.z), r.skipBackfaces = !0, r.collisionFilterMask = l, 
                r.collisionFilterGroup = o, r.result = n, this._btDiscreteDynamicsWorld.raycastClosest(a, c, r, n), 
                n.hasHit) {
                    if (s) {
                        s.succeeded = !0, s.collider = h._physicObjectsMap[n.body.layaID];
                        var _ = s.point, d = s.normal, u = n.hitPointWorld, C = n.hitNormalWorld;
                        _.setValue(u.x, u.y, u.z), d.setValue(C.x, C.y, C.z);
                    }
                    return !0;
                }
                return s.succeeded = !1, !1;
            }
        }, {
            key: "raycastAllFromTo",
            value: function raycastAllFromTo(t, e, s) {
                var o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : i.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;
                var l = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : i.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;
                var n = this._btRayoption, r = p._btTempVector30, a = p._btTempVector31;
                return r.set(t.x, t.y, t.z), a.set(e.x, e.y, e.z), n.skipBackfaces = !0, n.collisionFilterMask = l, 
                n.collisionFilterGroup = o, s.length = 0, this._btDiscreteDynamicsWorld.raycastAll(r, a, n, function(t) {
                    var i = this._collisionsUtils.getHitResult();
                    s.push(i), i.succeeded = !0, i.collider = h._physicObjectsMap[t.body.layaID];
                    var e = i.point, o = i.normal, l = t.hitPointWorld, n = t.hitNormalWorld;
                    e.setValue(l.x, l.y, l.z), o.setValue(n.x, n.y, n.z);
                }), 0 != s.length;
            }
        }, {
            key: "rayCast",
            value: function rayCast(t) {
                var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2147483647;
                var o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : i.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;
                var l = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : i.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;
                var n = t.origin, r = p._tempVector30;
                return i.Vector3.normalize(t.direction, r), i.Vector3.scale(r, s, r), i.Vector3.add(n, r, r), 
                this.raycastFromTo(n, r, e, o, l);
            }
        }, {
            key: "rayCastAll",
            value: function rayCastAll(t, e) {
                var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2147483647;
                var o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : i.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;
                var l = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : i.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;
                var n = t.origin, r = p._tempVector30;
                return i.Vector3.normalize(t.direction, r), i.Vector3.scale(r, s, r), i.Vector3.add(n, r, r), 
                this.raycastAllFromTo(n, r, e, o, l);
            }
        }, {
            key: "_updatePhysicsTransformFromRender",
            value: function _updatePhysicsTransformFromRender() {
                for (var t = this._physicsUpdateList.elements, i = 0, e = this._physicsUpdateList.length; i < e; i++) {
                    var s = t[i];
                    s._derivePhysicsTransformation(!1), s._inPhysicUpdateListIndex = -1;
                }
                this._physicsUpdateList.length = 0;
            }
        }, {
            key: "_updateCollisions",
            value: function _updateCollisions() {
                this._collisionsUtils.recoverAllContactPointsPool();
                var t = this._currentFrameCollisions;
                this._currentFrameCollisions = this._previousFrameCollisions, this._currentFrameCollisions.length = 0, 
                this._previousFrameCollisions = t;
                for (var e = i.Stat.loopCount, s = this._btDiscreteDynamicsWorld.allContacts, o = s.length, l = 0; l < o; l++) {
                    var n, r = s[l], a = h._physicObjectsMap[r.bi.layaID], c = h._physicObjectsMap[r.bj.layaID], _ = null, d = null;
                    if ((a.isTrigger || c.isTrigger) && (a.owner._needProcessTriggers || c.owner._needProcessTriggers)) d = (_ = this._collisionsUtils.getCollision(a, c)).contacts, 
                    (n = _._updateFrame !== e) && (_._isTrigger = !0, d.length = 0); else if ((a.owner._needProcessCollisions || c.owner._needProcessCollisions) && (a._enableProcessCollisions || c._enableProcessCollisions)) {
                        var p = this._collisionsUtils.getContactPoints();
                        p.colliderA = a, p.colliderB = c;
                        var u = p.normal, C = p.positionOnA, m = p.positionOnB, y = r.ni, O = r.ri, S = r.rj;
                        u.setValue(y.x, y.y, y.z), C.setValue(O.x, O.y, O.z), m.setValue(S.x, S.y, -S.z), 
                        d = (_ = this._collisionsUtils.getCollision(a, c)).contacts, (n = _._updateFrame !== e) && (_._isTrigger = !1, 
                        d.length = 0), d.push(p);
                    }
                    _ && n && (this._currentFrameCollisions.push(_), _._setUpdateFrame(e));
                }
            }
        }, {
            key: "_eventScripts",
            value: function _eventScripts() {
                for (var t = i.Stat.loopCount, e = 0, s = this._currentFrameCollisions.length; e < s; e++) {
                    var o = this._currentFrameCollisions[e], l = o._colliderA, n = o._colliderB;
                    if (!l.destroyed && !n.destroyed) if (t - o._lastUpdateFrame == 1) {
                        var r = l.owner, a = r._scripts;
                        if (a) if (o._isTrigger) {
                            if (r._needProcessTriggers) for (var h = 0, c = a.length; h < c; h++) {
                                a[h].onTriggerStay(n);
                            }
                        } else if (r._needProcessCollisions) for (h = 0, c = a.length; h < c; h++) {
                            o.other = n, a[h].onCollisionStay(o);
                        }
                        var _ = n.owner, d = _._scripts;
                        if (d) if (o._isTrigger) {
                            if (_._needProcessTriggers) for (h = 0, c = d.length; h < c; h++) {
                                d[h].onTriggerStay(l);
                            }
                        } else if (_._needProcessCollisions) for (h = 0, c = d.length; h < c; h++) {
                            o.other = l, d[h].onCollisionStay(o);
                        }
                    } else {
                        if (a = (r = l.owner)._scripts) if (o._isTrigger) {
                            if (r._needProcessTriggers) for (h = 0, c = a.length; h < c; h++) {
                                a[h].onTriggerEnter(n);
                            }
                        } else if (r._needProcessCollisions) for (h = 0, c = a.length; h < c; h++) {
                            o.other = n, a[h].onCollisionEnter(o);
                        }
                        if (d = (_ = n.owner)._scripts) if (o._isTrigger) {
                            if (_._needProcessTriggers) for (h = 0, c = d.length; h < c; h++) {
                                d[h].onTriggerEnter(l);
                            }
                        } else if (_._needProcessCollisions) for (h = 0, c = d.length; h < c; h++) {
                            o.other = l, d[h].onCollisionEnter(o);
                        }
                    }
                }
                for (e = 0, s = this._previousFrameCollisions.length; e < s; e++) {
                    var p = this._previousFrameCollisions[e], u = p._colliderA, C = p._colliderB;
                    if (!u.destroyed && !C.destroyed && t - p._updateFrame == 1) {
                        if (this._collisionsUtils.recoverCollision(p), a = (r = u.owner)._scripts) if (p._isTrigger) {
                            if (r._needProcessTriggers) for (h = 0, c = a.length; h < c; h++) {
                                a[h].onTriggerExit(C);
                            }
                        } else if (r._needProcessCollisions) for (h = 0, c = a.length; h < c; h++) {
                            p.other = C, a[h].onCollisionExit(p);
                        }
                        if (d = (_ = C.owner)._scripts) if (p._isTrigger) {
                            if (_._needProcessTriggers) for (h = 0, c = d.length; h < c; h++) {
                                d[h].onTriggerExit(u);
                            }
                        } else if (_._needProcessCollisions) for (h = 0, c = d.length; h < c; h++) {
                            p.other = u, d[h].onCollisionExit(p);
                        }
                    }
                }
            }
        }, {
            key: "clearForces",
            value: function clearForces() {
                if (!this._btDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
            }
        }, {
            key: "continuousCollisionDetection",
            get: function get() {
                return !1;
            },
            set: function set(t) {
                throw "Simulation:Cannon physical engine does not support this feature";
            }
        }, {
            key: "gravity",
            get: function get() {
                if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                return this._gravity;
            },
            set: function set(t) {
                if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                this._gravity = t, this._btDiscreteDynamicsWorld.gravity.set(t.x, t.y, t.z);
            }
        }, {
            key: "solverIterations",
            get: function get() {
                if (!this._btDiscreteDynamicsWorld || !this._btDiscreteDynamicsWorld.solver) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                return this._iterations;
            },
            set: function set(t) {
                if (!this._btDiscreteDynamicsWorld || !this._btDiscreteDynamicsWorld.solver) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                this._btDiscreteDynamicsWorld.solver.iterations = t, this._iterations = t;
            }
        }, {
            key: "speculativeContactRestitution",
            get: function get() {
                return !1;
            },
            set: function set(t) {}
        } ], [ {
            key: "__init__",
            value: function __init__() {
                p._btTempVector30 = new CANNON.Vec3(0, 0, 0), p._btTempVector31 = new CANNON.Vec3(0, 0, 0);
            }
        }, {
            key: "createConstraint",
            value: function createConstraint() {}
        } ]);
        return p;
    }();
    p.PHYSICSENGINEFLAGS_NONE = 0, p.PHYSICSENGINEFLAGS_COLLISIONSONLY = 1, p.PHYSICSENGINEFLAGS_SOFTBODYSUPPORT = 2, 
    p.PHYSICSENGINEFLAGS_MULTITHREADED = 4, p.PHYSICSENGINEFLAGS_USEHARDWAREWHENPOSSIBLE = 8, 
    p.SOLVERMODE_RANDMIZE_ORDER = 1, p.SOLVERMODE_FRICTION_SEPARATE = 2, p.SOLVERMODE_USE_WARMSTARTING = 4, 
    p.SOLVERMODE_USE_2_FRICTION_DIRECTIONS = 16, p.SOLVERMODE_ENABLE_FRICTION_DIRECTION_CACHING = 32, 
    p.SOLVERMODE_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION = 64, p.SOLVERMODE_CACHE_FRIENDLY = 128, 
    p.SOLVERMODE_SIMD = 256, p.SOLVERMODE_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS = 512, 
    p.SOLVERMODE_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS = 1024, p._tempVector30 = new i.Vector3(), 
    p.disableSimulation = !1;
    var u = /* */ function(_ref) {
        (0, _inherits2.default)(u, _ref);
        var _super7 = _createSuper(u);
        function u() {
            var _this6;
            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
            var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : i.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;
            (0, _classCallCheck2.default)(this, u);
            _this6 = _super7.call(this, t, e), _this6._isKinematic = !1, _this6._mass = 1, _this6._gravity = new i.Vector3(0, -10, 0), 
            _this6._angularDamping = 0, _this6._linearDamping = 0, _this6._totalTorque = new i.Vector3(0, 0, 0), 
            _this6._totalForce = new i.Vector3(0, 0, 0), _this6._linearVelocity = new i.Vector3(), 
            _this6._angularVelocity = new i.Vector3(), _this6._controlBySimulation = !0;
            return _this6;
        }
        (0, _createClass2.default)(u, [ {
            key: "_updateMass",
            value: function _updateMass(t) {
                this._btColliderObject && this._colliderShape && (this._btColliderObject.mass = t, 
                this._btColliderObject.updateMassProperties(), this._btColliderObject.updateSolveMassProperties());
            }
        }, {
            key: "_onScaleChange",
            value: function _onScaleChange(t) {
                (0, _get2.default)((0, _getPrototypeOf2.default)(u.prototype), "_onScaleChange", this).call(this, t), 
                this._updateMass(this._isKinematic ? 0 : this._mass);
            }
        }, {
            key: "_derivePhysicsTransformation",
            value: function _derivePhysicsTransformation(t) {
                this._innerDerivePhysicsTransformation(this.btColliderObject, t);
            }
        }, {
            key: "_onAdded",
            value: function _onAdded() {
                var t = new CANNON.Body();
                t.material = new CANNON.Material(), t.layaID = this.id, t.collisionFilterGroup = this.collisionGroup, 
                t.collisionFilterMask = this._canCollideWith, this._btColliderObject = t, (0, _get2.default)((0, 
                _getPrototypeOf2.default)(u.prototype), "_onAdded", this).call(this), this.mass = this._mass, 
                this.linearDamping = this._linearDamping, this.angularDamping = this._angularDamping, 
                this.isKinematic = this._isKinematic, this.isKinematic ? this._btColliderObject.type = CANNON.Body.KINEMATIC : this._btColliderObject.type = CANNON.Body.DYNAMIC;
            }
        }, {
            key: "_onShapeChange",
            value: function _onShapeChange(t) {
                (0, _get2.default)((0, _getPrototypeOf2.default)(u.prototype), "_onShapeChange", this).call(this, t), 
                this._isKinematic ? this._updateMass(0) : this._updateMass(this._mass);
            }
        }, {
            key: "_parse",
            value: function _parse(t) {
                null != t.friction && (this.friction = t.friction), null != t.restitution && (this.restitution = t.restitution), 
                null != t.isTrigger && (this.isTrigger = t.isTrigger), null != t.mass && (this.mass = t.mass), 
                null != t.isKinematic && (this.isKinematic = t.isKinematic), null != t.linearDamping && (this.linearDamping = t.linearDamping), 
                null != t.angularDamping && (this.angularDamping = t.angularDamping), (0, _get2.default)((0, 
                _getPrototypeOf2.default)(u.prototype), "_parse", this).call(this, t), this._parseShape(t.shapes);
            }
        }, {
            key: "_onDestroy",
            value: function _onDestroy() {
                (0, _get2.default)((0, _getPrototypeOf2.default)(u.prototype), "_onDestroy", this).call(this), 
                this._gravity = null, this._totalTorque = null, this._linearVelocity = null, this._angularVelocity = null;
            }
        }, {
            key: "_addToSimulation",
            value: function _addToSimulation() {
                this._simulation._addRigidBody(this);
            }
        }, {
            key: "_removeFromSimulation",
            value: function _removeFromSimulation() {
                this._simulation._removeRigidBody(this);
            }
        }, {
            key: "_cloneTo",
            value: function _cloneTo(t) {
                (0, _get2.default)((0, _getPrototypeOf2.default)(u.prototype), "_cloneTo", this).call(this, t);
                var i = t;
                i.isKinematic = this._isKinematic, i.mass = this._mass, i.angularDamping = this._angularDamping, 
                i.linearDamping = this._linearDamping, i.linearVelocity = this._linearVelocity, 
                i.angularVelocity = this._angularVelocity;
            }
        }, {
            key: "applyForce",
            value: function applyForce(t) {
                var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                if (null == this._btColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
                var e = u._btTempVector30;
                e.set(t.x, t.y, t.z);
                var s = u._btTempVector31;
                i ? s.set(i.x, i.y, i.z) : s.set(0, 0, 0), this.btColliderObject.applyLocalForce(e, s);
            }
        }, {
            key: "applyTorque",
            value: function applyTorque(t) {
                if (null == this._btColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
                var i = u._btTempVector30;
                i.set(t.x, t.y, t.z);
                var e = this.btColliderObject.torque;
                e.set(e.x + i.x, e.y + i.y, e.z + i.z), this.btColliderObject.torque = e;
            }
        }, {
            key: "applyImpulse",
            value: function applyImpulse(t) {
                var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                if (null == this._btColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
                if (null == this._btColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
                var e = u._btTempVector30;
                e.set(t.x, t.y, t.z);
                var s = u._btTempVector31;
                i ? s.set(i.x, i.y, i.z) : s.set(0, 0, 0), this.btColliderObject.applyImpulse(e, s);
            }
        }, {
            key: "wakeUp",
            value: function wakeUp() {
                this._btColliderObject && this._btColliderObject.wakeUp();
            }
        }, {
            key: "clearForces",
            value: function clearForces() {
                var t = this._btColliderObject;
                if (null == t) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
                t.velocity.set(0, 0, 0), t.velocity = t.velocity, t.angularVelocity.set(0, 0, 0), 
                t.angularVelocity = t.angularVelocity;
            }
        }, {
            key: "mass",
            get: function get() {
                return this._mass;
            },
            set: function set(t) {
                t = Math.max(t, 1e-7), this._mass = t, this._isKinematic || this._updateMass(t);
            }
        }, {
            key: "isKinematic",
            get: function get() {
                return this._isKinematic;
            },
            set: function set(t) {
                this._isKinematic = t, this._controlBySimulation = !t;
                var i = !!(this._simulation && this._enabled && this._colliderShape);
                i && this._removeFromSimulation();
                var e = this._btColliderObject, s = e.type;
                t ? (s |= CANNON.Body.KINEMATIC, e.type = s, this._enableProcessCollisions = !1, 
                this._updateMass(0)) : ((s & CANNON.Body.KINEMATIC) > 0 && (s ^= CANNON.Body.KINEMATIC), 
                e.allowSleep = !0, e.type = s, this._enableProcessCollisions = !0, this._updateMass(this._mass)), 
                e.velocity.set(0, 0, 0), e.angularVelocity.set(0, 0, 0), i && this._addToSimulation();
            }
        }, {
            key: "linearDamping",
            get: function get() {
                return this._linearDamping;
            },
            set: function set(t) {
                this._linearDamping = t, this._btColliderObject && (this._btColliderObject.linearDamping = t);
            }
        }, {
            key: "angularDamping",
            get: function get() {
                return this._angularDamping;
            },
            set: function set(t) {
                this._angularDamping = t, this._btColliderObject && (this._btColliderObject.angularDamping = t);
            }
        }, {
            key: "totalForce",
            get: function get() {
                if (this._btColliderObject) {
                    var t = this.btColliderObject.force;
                    return this.totalForce.setValue(t.x, t.y, t.z), this._totalForce;
                }
                return null;
            }
        }, {
            key: "linearVelocity",
            get: function get() {
                if (this._btColliderObject) {
                    var t = this.btColliderObject.velocity;
                    this._linearVelocity.setValue(t.x, t.y, t.z);
                }
                return this._linearVelocity;
            },
            set: function set(t) {
                if (this._linearVelocity = t, this._btColliderObject) {
                    var i = this.btColliderObject.velocity;
                    this.isSleeping && this.wakeUp(), i.set(t.x, t.y, t.z), this.btColliderObject.velocity = i;
                }
            }
        }, {
            key: "angularVelocity",
            get: function get() {
                if (this._btColliderObject) {
                    var t = this._btColliderObject.angularVelocity;
                    this.angularVelocity.setValue(t.x, t.y, t.z);
                }
                return this._angularVelocity;
            },
            set: function set(t) {
                if (this._angularVelocity = t, this._btColliderObject) {
                    var i = this.btColliderObject.angularVelocity;
                    this.isSleeping && this.wakeUp(), i.set(t.x, t.y, t.z), this.btColliderObject.velocity = i;
                }
            }
        }, {
            key: "totalTorque",
            get: function get() {
                if (this._btColliderObject) {
                    var t = this._btColliderObject.torque;
                    return this._totalTorque.setValue(t.x, t.y, t.z), this._totalTorque;
                }
                return null;
            }
        }, {
            key: "isSleeping",
            get: function get() {
                return !!this._btColliderObject && this._btColliderObject.sleepState != CANNON.Body.AWAKE;
            }
        }, {
            key: "sleepLinearVelocity",
            get: function get() {
                return this._btColliderObject.sleepSpeedLimit;
            },
            set: function set(t) {
                this._btColliderObject.sleepSpeedLimit = t;
            }
        }, {
            key: "btColliderObject",
            get: function get() {
                return this._btColliderObject;
            }
        } ], [ {
            key: "__init__",
            value: function __init__() {
                u._btTempVector30 = new CANNON.Vec3(), u._btTempVector31 = new CANNON.Vec3();
            }
        } ]);
        return u;
    }(_);
    u.TYPE_STATIC = 0, u.TYPE_DYNAMIC = 1, u.TYPE_KINEMATIC = 2, u._BT_DISABLE_WORLD_GRAVITY = 1, 
    u._BT_ENABLE_GYROPSCOPIC_FORCE = 2;
    var C = /* */ function(_n3) {
        (0, _inherits2.default)(C, _n3);
        var _super8 = _createSuper(C);
        function C() {
            var _this7;
            (0, _classCallCheck2.default)(this, C);
            _this7 = _super8.call(this), _this7._childColliderShapes = [], _this7._type = n.SHAPETYPES_COMPOUND;
            return _this7;
        }
        (0, _createClass2.default)(C, [ {
            key: "_clearChildShape",
            value: function _clearChildShape(t) {
                t._attatched = !1, t._compoundParent = null, t._indexInCompound = -1;
            }
        }, {
            key: "_addReference",
            value: function _addReference() {
                this._referenceCount++;
            }
        }, {
            key: "_removeReference",
            value: function _removeReference() {
                this._referenceCount--;
            }
        }, {
            key: "addChildShape",
            value: function addChildShape(t) {
                var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                if (t._attatched) throw "CompoundColliderShape: this shape has attatched to other entity.";
                t._attatched = !0, t._compoundParent = this, t._indexInCompound = this._childColliderShapes.length, 
                this._childColliderShapes.push(t), t.localOffset = i, this.physicColliderObject && (C._tempCannonQue.set(0, 0, 0, 1), 
                C._tempCannonVec.set(i.x * this._scale.x, i.y * this._scale.y, i.z * this._scale.z), 
                this.physicColliderObject._btColliderObject.addShape(t._btShape, C._tempCannonVec, CANNON.Vec3.ZERO));
            }
        }, {
            key: "removeChildShape",
            value: function removeChildShape(t) {
                if (t._compoundParent === this) {
                    var i = t._indexInCompound;
                    this._clearChildShape(t);
                    var e = this._childColliderShapes[this._childColliderShapes.length - 1];
                    e._indexInCompound = i, this._childColliderShapes[i] = e, this._childColliderShapes.pop(), 
                    this.physicColliderObject && this.bindRigidBody(this.physicColliderObject);
                }
            }
        }, {
            key: "bindRigidBody",
            value: function bindRigidBody(t) {
                this.physicColliderObject = t;
                var i, e = t._btColliderObject;
                e.shapes.length = 0, e.shapeOffsets.length = 0, e.shapeOrientations.length = 0;
                for (var s = 0, o = this._childColliderShapes.length; s != o; s++) {
                    var l = this._childColliderShapes[s];
                    e.shapes.push(l._btShape), i = l.localOffset, e.shapeOffsets.push(new CANNON.Vec3(i.x * this._scale.x, i.y * this._scale.y, i.z * this._scale.z)), 
                    e.shapeOrientations.push(C._tempCannonQue);
                }
                e.updateMassProperties(), e.updateBoundingRadius(), e.aabbNeedsUpdate = !0;
            }
        }, {
            key: "_setScale",
            value: function _setScale(t) {
                this._scale.setValue(t.x, t.y, t.z);
                for (var i = this.physicColliderObject._btColliderObject, e = this.getChildShapeCount(), s = i.shapeOffsets, o = 0; o < e; o++) {
                    var l = s[o], n = this._childColliderShapes[o];
                    n._setScale(t);
                    var r = n.localOffset;
                    l.set(r.x * t.x, r.y * t.y, r.z * t.z);
                }
                i.updateMassProperties(), i.updateBoundingRadius(), i.aabbNeedsUpdate = !0;
            }
        }, {
            key: "getChildShapeCount",
            value: function getChildShapeCount() {
                return this._childColliderShapes.length;
            }
        }, {
            key: "cloneTo",
            value: function cloneTo(t) {
                for (var i = t, e = 0, s = this._childColliderShapes.length; e < s; e++) {
                    i.addChildShape(this._childColliderShapes[e].clone());
                }
            }
        }, {
            key: "clone",
            value: function clone() {
                var t = new C();
                return this.cloneTo(t), t;
            }
        }, {
            key: "destroy",
            value: function destroy() {
                (0, _get2.default)((0, _getPrototypeOf2.default)(C.prototype), "destroy", this).call(this);
                for (var t = 0, i = this._childColliderShapes.length; t < i; t++) {
                    var e = this._childColliderShapes[t];
                    0 === e._referenceCount && e.destroy();
                }
            }
        } ], [ {
            key: "__init__",
            value: function __init__() {}
        } ]);
        return C;
    }(n);
    C._tempCannonQue = new CANNON.Quaternion(0, 0, 0, 1), C._tempCannonVec = new CANNON.Vec3(0, 0, 0), 
    t.CannonBoxColliderShape = r, t.CannonColliderShape = n, t.CannonCollision = e, 
    t.CannonCollisionTool = l, t.CannonCompoundColliderShape = C, t.CannonContactPoint = s, 
    t.CannonHitResult = o, t.CannonPhysicsCollider = _, t.CannonPhysicsComponent = h, 
    t.CannonPhysicsSettings = /* */ function() {
        function _class() {
            (0, _classCallCheck2.default)(this, _class);
            this.flags = 0, this.maxSubSteps = 3, this.fixedTimeStep = 1 / 60, this.contactEquationRelaxation = 10, 
            this.contactEquationStiffness = 1e6;
        }
        return _class;
    }(), t.CannonPhysicsSimulation = p, t.CannonPhysicsTriggerComponent = c, t.CannonPhysicsUpdateList = d, 
    t.CannonRigidbody3D = u, t.CannonSphereColliderShape = a;
}(window.Laya = window.Laya || {}, Laya);